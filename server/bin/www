#!/usr/bin/env node

const http = require('http');

let app = require('../app');

// catch 404 and render a not-found.hbs template
app.use((req, res, next) => {
  res.status(404);
});

app.use((err, req, res, next) => {
  // always log the error
  console.error('ERROR', req.method, req.path, err);

  // only render if the error ocurred before sending the response
  if (!res.headersSent) {
    res.status(500);
  }
});


const setErrorChecker = (server, port) => {
  server.on('error', error => {
    if (error.syscall !== 'listen') { throw error }
    
    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(`Port ${port} requires elevated privileges`);
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(`Port ${port} is already in use`);
        process.exit(1);
        break;
      default:
        throw error;
    }
  });
}

let server = http.createServer(app);

setErrorChecker(server, process.env.PORT);

server.listen(process.env.PORT, () => {
  console.log(`Listening on http://localhost:${process.env.PORT}`);
});
